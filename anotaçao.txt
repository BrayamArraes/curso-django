from django import forms
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
import re


def strong_password(password):
    # está linha é p/ o usuario criar a password com caracteres/numeros tendo que importar o re (expreçao regular): import re
    regex = re.compile(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,}$')

    if not regex.match(password):
        raise ValidationError((
            'a password deve ter pelo menos uma letra maiúscula, '
            'uma letra minúscula e um número. O comprimento deve ser '
            'pelo menos 8 caracteres.'
        ),
            code='invalid'
        )

# Dentro desta class vc pode colocar tudo de uma vez sem precisar usar os fields um por um entao dentro da variavel
# você pode colocar os placeholder, label, help-text, widget.... como exemplo abaixo .


class RegistroForm(forms.ModelForm):
    password = forms.CharField(
        required=True,
        widget=forms.PasswordInput(attrs={
            'placeholder': 'Digite sua senha'
        }),
        validators=[strong_password],
        label='Senha',
    )
    password2 = forms.CharField(
        required=True,
        widget=forms.PasswordInput(attrs={
            'placeholder': 'Repita sua senha'
        }),
        label='Confirme sua senha'
    )

    email = forms.EmailField(
        error_messages={'required': 'Este campo é obrigatório.'},
        label='E-mail',
        help_text='O e-mail deve ser válido.',
        widget=forms.TextInput(attrs={
            'placeholder': 'Digite seu E-mail',
        })
    )

    username = forms.CharField(
        label='Username',
        help_text=(
            'Username must have letters, numbers or one of those @.+-_. '
            'The length should be between 4 and 150 characters.'
        ),
        error_messages={
            'required': 'This field must not be empty',
            'min_length': 'Username must have at least 4 characters',
            'max_length': 'Username must have less than 150 characters',
        },
        min_length=4, max_length=150,
    )

    first_name = forms.CharField(
        error_messages={'required': 'Write your first name'},
        label='First name'
    )
    last_name = forms.CharField(
        error_messages={'required': 'Write your last name'},
        label='Last name'
    )

    class Meta:
        model = User
        fields = [
            'first_name',
            'last_name',
            'username',
            'email',
        ]
    # label é o nome do campo que aparece para o usuario
    #  labels = {}
    # help_texts é a mensagem que fica embaixo do campo
    #  help_texts = {}
    # é os erros dos campos e ele é por codigo exemplo: required, invalide
    #  error_messages = {}
    # widgets nada mais é de uma breve descrição do campo.. neste campo pode colocar placeholder, class de css .. para editar melhor
    #  widgets = {}

    # esta def clean garante que o e-mail seja unico
    def clean_email(self):
        email = self.cleaned_data.get('email', '')
        exists = User.objects.filter(email=email).exists()

        if exists:
            raise ValidationError(
                'Este e-mail já está em uso', code='invalid',
            )

        return email

    # este metodo é para validar um campo de formulario, o def clean é onde o formulario vai.
    # def clean_password(self):
    #   data = self.cleaned_data.get('password')

    #  if 'atenção' in data:
    #      raise ValidationError(
    #         'Não digite %(value)s no campo senha',
    #        code='invalid',
    #       params={'value': '"atenção"'}
    #  )

    # return data

    # este metodo é para validar apartir do clean_field que seria os name dos campos por exemplo first name
    # def clean_first_name(self):
    # data = self.cleaned_data.get('first_name')

    # if 'John Doe' in data:
    #    raise ValidationError(
    #       'Não digite %(value)s no campo first name',
    #      code='invalid',
    #     params={'value': '"John Doe"'}
    # )

    # return data

    # está validação é feita quando um campo depende de outro para validar por exemplo password e a confirmaçao da password 
    def clean(self):
        cleaned_data = super().clean()

        password = cleaned_data.get('password')
        password2 = cleaned_data.get('password2')

        if password != password2:
            password_confirmation_error = ValidationError(
                'password e password 2 devem ser iguais',
                code='invalid'
            )
            raise ValidationError({
                'password': password_confirmation_error,
                'password2': [
                    password_confirmation_error,
                ],
            })



para traduzir a template para a linguagem em que o navegador se encontra você,
ira precisar alterar a linguagem do html nas templates para 
<html lang="{{ html_language }}">, nas views vc tem que importar o translation
from django.utils import translation e no context das urls vocÊ tem que colocar
html_language = translation.get_language(). Feito isso seu template daquela view ira
ficar com a linguagem do navegador em que o cliente se encontra.